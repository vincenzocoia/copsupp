% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/pcondrvine.R
\name{pcondrvine}
\alias{pcondrvine}
\title{Conditional Distribution in a Regular Vine}
\usage{
pcondrvine(dat, rv, cond, vbls = vars(rv), verbose = FALSE)
}
\arguments{
\item{dat}{vector or matrix of observations (columns are variables).}

\item{rv}{Regular vine object, complete.}

\item{cond}{Integer; the variable you wish to condition on (i.e. the
column number of \code{dat}, also present in \code{rv}).}

\item{vbls}{Vector of integers; the variables you wish to consider. Default
is all variables in \code{rv}.}

\item{verbose}{Logical; should the function output how it goes about
finding the conditional distribution?}
}
\value{
A vector of length = the number of observations in \code{dat},
representing the evaluated conditional distribution of variable \code{cond}
given the other variables in \code{vbls}.
}
\description{
Evaluates the conditional distribution of a variable in a regular vine,
given values of the other variables in that vine.
}
\details{
To compute the conditional distribution, the vine is subsetted to
the selected variables if possible. Then, if the conditioned variable is a
leaf, the conditional distributon is directly computed. If it's not a leaf,
the conditional distribution is computed by integrating the density.

If the subsetted vine does not exist, then the vine will be subsetted "as
much as possible", and the remaining variables that cannot be removed
will be integrated out to find the joint density of the selected variables,
from which the conditional cdf will be found.
}
\examples{
## D-Vine example
A <- CopulaModel::Dvinearray(5)
A <- relabel.varray(A, c(1, 5, 4, 3, 2))
A <- truncvarray(A, 2)
copmat <- makeuppertri("bvncop", 2, 5)
cparmat <- makeuppertri(c(1:7/10), 2, 5, byRow = FALSE)
udat <- fvinesim(10, A, copmat, cparmat)
pcondrvine(udat, 5, A, copmat, cparmat, verbose=T)  # integrates vine density.
pcondrvine(udat, 2, A, copmat, cparmat, verbose=T)  # computes from D-vine formula

## C-Vine example
A <- CopulaModel::Cvinearray(5)
A <- truncvarray(A, 2)
udat <- fvinesim(10, A, copmat, cparmat)
pcondrvine(udat, 3, A, copmat, cparmat, verbose=T)  # computes from general R-vine algo

## Array doesn't have to involve all data:
A <- CopulaModel::Dvinearray(5)
A <- truncvarray(A, 2)
A <- rvinesubset(A, 3:5)
copmat <- makeuppertri("frk", 2, 3, "")
cparmat <- makeuppertri(3:1, 2, 3)
pcondrvine(1:5/10, 3, A, copmat, cparmat)
pcondrvine(1:5/10, 4, A, copmat, cparmat)
## are the same as...
A <- CopulaModel::Dvinearray(3)
A <- truncvarray(A, 2)
pcondrvine(3:5/10, 1, A, copmat, cparmat)
pcondrvine(3:5/10, 2, A, copmat, cparmat)
}

