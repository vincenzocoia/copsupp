% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/pcondrvine.R
\name{pcondrvine}
\alias{pcondrvine}
\title{Conditional Distribution in a Regular Vine}
\usage{
pcondrvine(dat, cond, A, copmat, cparmat, Fmarg = identity, verbose = FALSE)
}
\arguments{
\item{dat}{vector or matrix of observations (columns are variables).}

\item{cond}{Integer; the variable you wish to condition on (i.e. the
column number of \code{dat}).}

\item{A}{Vine array matrix, possibly truncated.
Variables should be labelled to correspond to
the order they appear in \code{dat}, not so that
they match the column number of \code{A}.}

\item{copmat}{Upper triangular matrix of copula names corresponding to
the edges in \code{A}.}

\item{cparmat}{Upper triangular matrix of copula parameters
corresponding to the copula families in \code{copmat}.}

\item{Fmarg}{List of (univariate) marginal cdfs corresponding to
the columns in \code{dat};
each should be vectorized. Or a single function if the cdf is all the same.}

\item{verbose}{Logical; should the function output how it goes about
finding the conditional distribution?}
}
\value{
A vector of length = the number of observations in \code{dat},
representing the evaluated conditional distribution of variable \code{cond}
given the other variables in \code{A}.
}
\description{
Evaluates the conditional distribution of a variable in a regular vine,
given values of the other variables in that vine.
}
\details{
This function could do one of two things, depending on the
scenario.

\itemize{
 \item If variable \code{cond} is not a leaf (that is, a vine array cannot
 be written with it at the end), then the conditional density is integrated.
 \item If variable \code{cond} is a leaf, then Bo's
 \code{rVineTruncCondCDF} function in the \code{copreg} package is
 used to compute the conditional cdf.
}
}
\examples{
## D-Vine example
A <- CopulaModel::Dvinearray(5)
A <- relabel.varray(A, c(1, 5, 4, 3, 2))
A <- truncvarray(A, 2)
copmat <- makeuppertri("bvncop", 2, 5)
cparmat <- makeuppertri(c(1:7/10), 2, 5, byRow = FALSE)
udat <- fvinesim(10, A, copmat, cparmat)
pcondrvine(udat, 5, A, copmat, cparmat, verbose=T)  # integrates vine density.
pcondrvine(udat, 2, A, copmat, cparmat, verbose=T)  # computes from D-vine formula

## C-Vine example
A <- CopulaModel::Cvinearray(5)
A <- truncvarray(A, 2)
udat <- fvinesim(10, A, copmat, cparmat)
pcondrvine(udat, 3, A, copmat, cparmat, verbose=T)  # computes from general R-vine algo

## Array doesn't have to involve all data:
A <- CopulaModel::Dvinearray(5)
A <- truncvarray(A, 2)
A <- rvinesubset(A, 3:5)
copmat <- makeuppertri("frk", 2, 3, "")
cparmat <- makeuppertri(3:1, 2, 3)
pcondrvine(1:5/10, 3, A, copmat, cparmat)
pcondrvine(1:5/10, 4, A, copmat, cparmat)
## are the same as...
A <- CopulaModel::Dvinearray(3)
A <- truncvarray(A, 2)
pcondrvine(3:5/10, 1, A, copmat, cparmat)
pcondrvine(3:5/10, 2, A, copmat, cparmat)
}

