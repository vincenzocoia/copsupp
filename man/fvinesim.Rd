% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/fvinesim.R
\name{fvinesim}
\alias{fvinesim}
\title{Friendly vine simulation}
\usage{
fvinesim(n, rv, iprint = FALSE)
}
\arguments{
\item{n}{Number of observations to generate}

\item{rv}{Object of type "rvine".}

\item{iprint}{Logical, as in \code{\link{rvinesimvec2}}, which says
"print flag for intermediate results".}
}
\description{
A (hopefully) user-friendly function to simulate from a vine copula.
Essentially a wrapper
for \code{\link{rvinesimvec2}}.
}
\details{
To make a matrix of copulas, use \code{\link{makeuppertri}}. Some copula
parameters may have more or less parameters than 1 -- in this case,
enlist the help of \code{\link{makeuppertri.list}}.

To name the copulas, use the names as in the CopulaModel package. For
example, "Frank" is \code{"frk"}, and "Gumbel" is \code{"gum"}.
}
\note{
Like in \code{\link{rvinesimvec2}}, the copula families are assumed to be
permutation symmetric.
}
\examples{
## Vine:
rv <- rvine(CopulaModel::Dvinearray(5), "frk", makeuppertri(2, 4, 5))
A <- relabel(rv, c(3, 5, 1, 2, 4))

## Simulate 10 observations:
set.seed(123)
fvinesim(10, rv)

## Same thing, but 2-truncated:
rv <- trunc(rv, 2)
set.seed(123)
fvinesim(10, rv)
## Notice that variables 3,5,1 -- the first three generated --- are the same
##  as the complete vine, since they are only linked by 2 trees anyways.

## One more with slightly more specifications:
rv <- trunc(rvine(Cvinearray(4)), 2)
#copmat(rv) <- makeuppertri(c("gum", "gal", "bvtcop",
#                           "bvncop", "frk"), row = 2, col = 4, blanks = "")
#cparmat(rv) <- makeuppertri.list(c(1.5, 1.5, 0.9, 3, 0.1, 0.5),
#                                 len = c(1,1,2,1,1), row = 2, col = 4)
#fvinesim(10, A, copmat, cparmat)
}

