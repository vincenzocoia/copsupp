% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/center.rvine.R
\name{centervarray}
\alias{centervarray}
\alias{center.rvine}
\title{Center a Vine}
\usage{
centervarray(G)

\method{center}{rvine}(rv)
}
\arguments{
\item{G}{Vine array. Must be a regular vine, with truncation in
the traditional sense.}

\item{rv}{Regular vine object.}
}
\value{
G-vine array or vine, with variables reordered.
}
\description{
Converts a vine array (\code{centervarray}) or vine
(\code{center.rvine}) so that the first variables (up to
truncation) are not "leaves". This may not work outside of
regular vines with truncation under the traditional sense.
}
\details{
For a \code{t}-truncated vine array \code{(t < ncol(G)-1)},
the vine array is re-ordered so that the first \code{t} variables
introduced in the outputted array are not leaves.

If \code{t = ncol(G)-1}, then the entered vine isn't truncated, and the
first \code{t-1} variables in the outputted array are not leaves (in fact,
a natural order array is outputted, since it satisfies that requirement).
}
\examples{
## Setup a vine.
G <- AtoG(CopulaModel::Dvinearray(5))
copmat <- makeuppertri(c("gum", "mtcj", "gal", "joe",
                         "frk", "gum", "bb7",
                         "bb1", "indepcop",
                         "bb8"), 4, 5, "")
cparmat <- makeuppertri.list(c(3, 2.5, 2, 1.5,
                               1, 1.3, 2, 2,
                               3, 4,
                               5, 0.5),
                             len = c(1,1,1,1,1,1,2,2,0,2),
                             4, 5)
(rv <- rvine(G, copmat, cparmat))

## Center it. Since it's a complete vine, the output is in natural order:
centervarray(G)
center(rv)

## Center a truncated vine:
centervarray(G[1:3, ])
center(trunc(rv, 2))

## It works in these cases too:
center(trunc(rv, 0))
center(subset(rv, 5))
center(subset(rv, integer(0)))
}
